/*
 * This source file was generated by the Gradle 'init' task
 */
package com.kimikevin;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.NumberFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

import static com.kimikevin.UtilityFx.deleteDirRecursively;
import static com.kimikevin.UtilityFx.getMondays;

public class App {

    public static void main(String[] args) {
        // throwing a runtime exception(Throwable)
//        RuntimeException exception = new RuntimeException("Something went wrong");
//        throw exception;
        // throwing a checked exception
//        try {
//            System.out.println(readTextFromFile("path_to_file"));
//        } catch (IOException e) {
//            System.out.println(e.getMessage());
//        }

//        // throwing unchecked exceptions
//        Account account = new Account();
//        account.deposit(100);
//        System.out.println(account.getBalance());

//        // example of throwing unchecked exceptions
//        Scanner scanner = new Scanner(System.in);
//        int dayNumber = scanner.nextInt();
//        try {
//            System.out.println(getDayOfWeekName(dayNumber));
//        } catch (Exception e) {
//            System.out.println(e.getClass().getName());
//        }

//        // local date
//        LocalDate now = LocalDate.now();
//        LocalDate date1 = LocalDate.of(2025, 10, 22); // 2025-10-22 (22 October 2025)
//        LocalDate date2 = LocalDate.parse("2025-10-22"); // 2025-10-22 (22 October 2025)
//
//        System.out.println(now);
//        System.out.println(date1);
//        System.out.println(date2);
//
//        System.out.println(LocalDate.ofYearDay(2016, 365)); // 2016-12-30 (30 December 2016)
//        System.out.println(LocalDate.ofYearDay(2017, 365)); // 2017-12-31 (31 December 2017)
//
//        System.out.println(LocalDate.ofYearDay(2017, 366)); // here an exception occurs, because the year is not a leap year
//
//        LocalDate date = getLocalDate();
//        LocalDate in2016 = date.withYear(2016);   // 2016-01-01 (1 January 2016)

//        // 2 weeks after
//        Scanner scanner = new Scanner(System.in);
//        String date = scanner.nextLine();
//
//        LocalDate localDate = LocalDate.parse(date);
//        System.out.println(localDate.plusWeeks(2));

//        // find all mondays
//        Scanner scanner = new Scanner(System.in);
//        int year = scanner.nextInt();
//        int month = scanner.nextInt();
//
//        List<LocalDate> mondays = getMondays(year, month);
//        for (LocalDate monday : mondays) {
//            System.out.println(monday);
//        }

//        // Print dates of a year with an offset
//        Scanner scanner = new Scanner(System.in);
//        String date = scanner.nextLine();
//        int offset = scanner.nextInt();
//
//        LocalDate localDate =  LocalDate.parse(date);
//
//        LocalDate endOfYear = localDate.withDayOfYear(localDate.lengthOfYear());
//
//        for (int i = localDate.getDayOfYear(); !localDate.isAfter(endOfYear) ; i += offset ) {
//            System.out.println(localDate);
//            localDate = localDate.plusDays(offset);
//        }

//        // 30 years before and after
//        Scanner scanner = new Scanner(System.in);
//        String date  = scanner.nextLine();
//
//        LocalDate localDate = LocalDate.parse(date);
//
//        System.out.println(localDate.minusYears(30));
//        System.out.println(localDate.plusYears(30));

//        // Convert numbers to days
//        Scanner scanner = new Scanner(System.in);
//        int year = scanner.nextInt();
//        int day1 = scanner.nextInt();
//        int day2 = scanner.nextInt();
//        int day3 = scanner.nextInt();
//
//        LocalDate date1 = LocalDate.ofYearDay(year, day1);
//        LocalDate date2 = LocalDate.ofYearDay(year, day2);
//        LocalDate date3 = LocalDate.ofYearDay(year, day3);
//
//        LocalDate[] dates = new LocalDate[]{date1, date2, date3};
//        for (LocalDate date : dates) {
//            System.out.println(date);
//        }

//        // The first and the last day of a month
//        Scanner scanner = new Scanner(System.in);
//        int year = scanner.nextInt();
//        int month = scanner.nextInt();
//
//        LocalDate firstDay = LocalDate.of(year, month, 1);
//        LocalDate lastDay = LocalDate.of(year, month, firstDay.lengthOfMonth());
//
//        System.out.println(firstDay + " " + lastDay);

//        // 10 days before
//        Scanner scanner = new Scanner(System.in);
//        String day = scanner.nextLine();
//
//        LocalDate date = LocalDate.parse(day);
//
//        System.out.println(date.minusDays(10));

//        // Leap Year Check: A Date's True Colors
//        Scanner scanner = new Scanner(System.in);
//        String day = scanner.nextLine();
//
//        LocalDate localDate = LocalDate.parse(day);
//
//        System.out.println(localDate.isLeapYear());

//        // accessing with the name() method
//        UserStatus active = UserStatus.ACTIVE;
//        System.out.println(active.name());
//
//        // accessing by it\'s name with the valueOf() method
//        UserStatus blocked = UserStatus.valueOf("BLOCKED");
//        System.out.println(blocked.name());
//
//        // accessing all the values
//        UserStatus[] statuses = UserStatus.values();
//        System.out.println(Arrays.toString(statuses));
//
//        // accessing the position using the ordinal() method
//        System.out.println(active.ordinal());
//        System.out.println(blocked.ordinal());
//        System.out.println(UserStatus.PENDING.ordinal());
//
//        // using the equals() method and the '==' operator
//        System.out.println(active.equals(UserStatus.ACTIVE));
//        System.out.println(active == UserStatus.ACTIVE);
//
//        // using enums in switch statements
//        UserStatus test = UserStatus.PENDING;
//
//        switch (test) {
//            case PENDING -> {
//                System.out.println("You need to wait a little.");
//                break;
//            }
//            case ACTIVE -> {
//                System.out.println("No problems, you may pass here.");
//                break;
//            }
//            case BLOCKED -> {
//                System.out.println("Stop! You can't pass here.");
//                break;
//            }
//            default -> System.out.println("Unsupported enum constant.");
//        }
//
//        // iterating over an enum
//        for (UserStatus status : UserStatus.values()) {
//            System.out.println(status.name().startsWith("BLOCKED"));
//        }

//        int tasteValue = 0;
//        ThingsToTaste taste = ThingsToTaste.values()[tasteValue];
//
//        tasteValue = switch (taste) {
//            case SUGAR, PIZZA, CHOCOLATE -> 10;
//            case MEATBALLS, STEAK -> 7;
//            case BROCCOLI -> 4;
//            case DIRT -> 1;
//            default -> throw new IllegalStateException("Invalid tastable object: " + taste);
//        };
//
//        System.out.println(taste + ": " + tasteValue);

//        // macOS style
//        File file = new File("/Users/kimi-kevin/Documents"); // a directory on a UNIX-like system
//        System.out.println("file: " + file.getAbsolutePath());
//
//        // character for separating the path to a file
//        System.out.println(File.separator);
//
//        System.out.println("File name: " + file.getName());
//        System.out.println("File path: " + file.getPath());
//        System.out.println("Is file: " + file.isFile());
//        System.out.println("Is directory: " + file.isDirectory());
//        System.out.println("Exists: " + file.exists());
//        System.out.println("Parent path: " + file.getParent());

//        // files
//        File file = new File("/Users/kimi-kevin/Documents/Example.txt");
//        if (file.exists()) {
//            System.out.println(file.getName() + " exists");
//            file.delete();
//        } else {
//            System.out.println("File not found");
//        }

//        // Reading data using Scanner
//        String pathToFile = "/Users/kimi-kevin/Documents/readme.txt";
//        File file = new File(pathToFile);
//
//        try(Scanner scanner = new Scanner(file)) {
//
//            while (scanner.hasNext()) {
//                System.out.print(scanner.nextLine() + "\n");
//            }
//        } catch (FileNotFoundException exception) {
//            System.out.println("File not found: " + exception.getMessage());
//        }
//        // Reading all text from a file as a single string
//        try {
//            System.out.println(readFileAsString(pathToFile));
//        } catch (IOException e) {
//            System.out.println("Cannot read file: " + e.getMessage());
//        }

//        String pathToFile = "/Users/kimi-kevin/Documents/file.txt";
//        try (Scanner scanner = new Scanner(new File(pathToFile))) {
//            scanner.nextLine();
//            scanner.nextLine();
//            System.out.println(scanner.nextLine());
//        } catch (FileNotFoundException e) {
//            System.out.println(e.getMessage());
//        }

//        // The sum of numbers in a file
//        String pathToFile = "/Users/kimi-kevin/Desktop/github/oracle-java-foundations/demo/app/src/main/resources/dataset.txt";
//
//
//        try{
//           Scanner scanner = new Scanner(new File(pathToFile));
//            scanner.useDelimiter("[,\\s]+");
//           int sum = 0;
//           while (scanner.hasNext()) {
//               int num = Integer.parseInt(scanner.nextLine());
//               sum += num;
//           }
//            System.out.println(sum);
//
//           scanner.close();
//        } catch (FileNotFoundException e) {
//            System.out.println("File not found" + e.getMessage());
//        }

//        // Find the greatest number in a file
//        String pathToFile = "/Users/kimi-kevin/Desktop/github/oracle-java-foundations/demo/app/src/main/resources/dataset.txt";
//
//        try {
//            Scanner scanner = new Scanner(new File(pathToFile));
//            scanner.useDelimiter("[,\\s]+");
//
//            ArrayList<Integer> list = new ArrayList<>();
//
//            while (scanner.hasNextInt()) {
//                list.add(scanner.nextInt());
//            }
//
//            int[] numbers = list.stream().mapToInt(Integer::intValue).toArray();
//
//            System.out.println(findFirstIndexOfMax(numbers));
//        } catch (FileNotFoundException e) {
//            System.out.println("File not found " + e.getMessage());
//        }

//        // World population
//        String pathToFile = "/Users/kimi-kevin/Desktop/github/oracle-java-foundations/demo/app/src/main/resources/dataset.txt";
//        String year = "";
//        long diffMax = 0;
//        long temp = 0;
//        File file = new File(pathToFile);
//
//
//        try (Scanner scanner = new Scanner(file)){
//            StringBuilder input = new StringBuilder();
//            while (scanner.hasNext()){
//                input.append(scanner.next().replace(",", "")).append(" ");
//            }
//            String[] inputArray = input.toString().split(" ");
//
//            for(int i = 5; i < inputArray.length; i += 2){
//                temp = Long.parseLong(inputArray[i]) - Long.parseLong(inputArray[i-2]);
//                if (temp > diffMax){
//                    diffMax = temp;
//                    year = inputArray[i-1];
//                }
//            }
//        } catch (FileNotFoundException e){
//            System.out.println(e.getMessage());
//        }
//        System.out.println("Maximum growth in: " + year);

//        String pathToFile = "/Users/kimi-kevin/Desktop/github/oracle-java-foundations/demo/app/src/main/java/com/kimikevin/file.txt";
//        try (Scanner scanner = new Scanner(new File(pathToFile))) {
//            System.out.println(scanner.nextInt());
//        } catch (FileNotFoundException e) {
//            System.out.println(e.getMessage());
//        }

//        // even counter
//        String pathToFile = "/Users/kimi-kevin/Desktop/github/oracle-java-foundations/demo/app/src/main/resources/dataset.txt";
//        int evenCounter = 0;
//        File file = new File(pathToFile);
//
//        try (Scanner scanner = new Scanner(file)){
//            int temp = scanner.nextInt();
//            while (scanner.hasNext() && temp != 0){
//                evenCounter += temp % 2 == 0 ? 1 : 0;
//                temp = scanner.nextInt();
//            }
//        } catch (FileNotFoundException e){
//            System.out.println(e.getMessage());
//        }
//        System.out.println(evenCounter);

//        // creating files
//        File file = new File("/Users/kimi-kevin/Documents/file.txt");
//        try {
//            boolean createdNew = file.createNewFile();
//            if (createdNew) {
//                System.out.println("The file was successfully created.");
//            } else {
//                System.out.println("The file already exists.");
//            }
//        } catch (IOException e) {
//            System.out.println("Cannot create the file: " + file.getPath());
//        }

//        // creating directory
//        File file = new File("/Users/kimi-kevin/Documents/dir");
//
//        boolean createdNewDirectory = file.mkdir();
//        if (createdNewDirectory) {
//            System.out.println("It was successfully created.");
//        } else {
//            System.out.println("It was not created.");
//        }
//
//        // creating directories
//        File directory = new File("/Users/kimi-kevin/Documents/dir/dir/dir");
//
//        boolean createdNewDirectories = directory.mkdirs();
//        if (createdNewDirectories) {
//            System.out.println("It was successfully created.");
//        }  else {
//            System.out.println("It was not created.");
//        }

//        // removing files and directories
//        File directory = new File("/Users/kimi-kevin/Documents/dir/dir/dir");
//
//        if (directory.delete()) {
//            System.out.println("It was successfully removed.");
//        } else {
//            System.out.println("It was not removed.");
//        }

//        // removing subdirectories and subfiles
//        File directory = new File("/Users/kimi-kevin/Documents/dir/dir");
//        deleteDirRecursively(directory);

//        // renaming files
//        File file = new File("/Users/kimi-kevin/Documents/file.txt");
//        File renamedFile = new File("/Users/kimi-kevin/Documents/refill.txt");
//
//        boolean renamed = file.renameTo(renamedFile);
//        if (renamed) {
//            System.out.println("It was successfully renamed.");
//        } else {
//            System.out.println("It was not renamed.");
//        }

//        // moving files
//        File file = new File("/Users/kimi-kevin/Documents/refill.txt");
//        File renamedFile = new File("/Users/kimi-kevin/Documents/dir/refill.txt");
//
//        boolean renamed = file.renameTo(renamedFile);
//        if (renamed) {
//            System.out.println("It was successfully moved.");
//        } else {
//            System.out.println("It was not moved.");
//        }


//        // fields and methods in enum
//        System.out.println(ChargeLevel.LOW.getSections()); // 1
//        System.out.println(ChargeLevel.LOW.getColor()); // red
//        System.out.println(ChargeLevel.findByNumberOfSections(2)); // MEDIUM
    }


//    private enum ThingsToTaste {
//        PIZZA, BROCCOLI,
//        STEAK, SUGAR,
//        DIRT, MEATBALLS,
//        CHOCOLATE,
//    }

}
